name: CI
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'
env:
  FORCE_COLOR: 1
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-20.04
          - windows-latest
        host:
          - x64
        target:
          - x64
        node:
          - 20
        include:
          - os: ubuntu-20.04
            node: 20
            host: x64
            target: arm64
          - os: windows-latest
            node: 20
            host: x64
            target: x86
          - os: windows-latest
            node: 20
            host: x64
            target: arm64
          - os: macos-latest
            node: 20
            host: arm64
            target: arm64
    name: ${{ matrix.os }} (host=${{ matrix.host }}, target=${{ matrix.target }})
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.host }}

      - name: Add yarn (self-hosted)
        if: matrix.os == 'macos-latest'
        run: npm install -g yarn

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        if: contains(matrix.os, 'windows')

      - name: Install dependencies
        run: yarn install --ignore-scripts

      - name: Check Node compatibility
        run: node tools/semver-check.js

      - name: Add env vars
        shell: bash
        run: |
          echo "V=1" >> $GITHUB_ENV

          if [ "${{ matrix.target }}" = "x86" ]; then
            echo "TARGET=ia32" >> $GITHUB_ENV
          else
            echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          fi

      - name: Add Linux env vars
        if: contains(matrix.os, 'ubuntu')
        run: |
          echo "CFLAGS=${CFLAGS:-} -include ../src/gcc-preinclude.h" >> $GITHUB_ENV
          echo "CXXFLAGS=${CXXFLAGS:-} -include ../src/gcc-preinclude.h" >> $GITHUB_ENV

      - name: Setup cross compilation for Linux ARM64
        if: contains(matrix.os, 'ubuntu') && matrix.target == 'arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          echo "AS=aarch64-linux-gnu-as" >> $GITHUB_ENV
          echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CPP=aarch64-linux-gnu-cpp" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "LD=aarch64-linux-gnu-ld" >> $GITHUB_ENV
          echo "FC=aarch64-linux-gnu-gfortran" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Build binaries
        run: yarn prebuild -a ${{ env.TARGET }}

      - name: Print binary info
        if: contains(matrix.os, 'ubuntu')
        run: |
          if [ "${{ matrix.target }}" = "arm64"  ]; then
            PREFIX=aarch64-linux-gnu-
          fi

          ${PREFIX}readelf -d build/**/node_sqlite3.node | grep "Shared library"
          echo "---"
          ${PREFIX}nm build/**/node_sqlite3.node | grep "GLIBC_" | ${PREFIX}c++filt || true
          echo "---"
          file build/**/node_sqlite3.node

      - name: Run tests
        if: matrix.host == matrix.target
        run: yarn test

      - name: Upload binaries to commit artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node == 20
        with:
          name: prebuilt-binaries-${{ matrix.os }}-host${{ matrix.host }}-target${{ matrix.target }}.zip
          path: prebuilds/*
          retention-days: 7

      - name: Upload binaries to GitHub Release
        run: yarn upload --upload-all ${{ github.token }}
        if: matrix.node == 20 && startsWith(github.ref, 'refs/tags/')

  build-qemu:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        node:
          - 20
        target:
          - linux/arm64
        variant:
          - alpine3.20
        include:
          # musl x64 builds
          - target: linux/amd64
            variant: alpine3.20
            node: 20
    name: ${{ matrix.variant }} (node=${{ matrix.node }}, target=${{ matrix.target }})
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build binaries and test
        run: |
          docker buildx build \
            --file ./tools/BinaryBuilder.Dockerfile \
            --load \
            --tag sqlite-builder \
            --platform ${{ matrix.target }} \
            --no-cache \
            --build-arg VARIANT=${{ matrix.variant }} \
            --build-arg NODE_VERSION=${{ matrix.node }} \
            .
          CONTAINER_ID=$(docker create -it sqlite-builder)
          docker cp $CONTAINER_ID:/usr/src/build/prebuilds/ ./prebuilds

      - name: Upload binaries to commit artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node == 20
        with:
          name: prebuilt-binaries
          path: prebuilds/*
          retention-days: 7

      - name: Upload binaries to GitHub Release
        run: yarn install --ignore-scripts && yarn upload --upload-all ${{ github.token }}
        if: matrix.node == 20 && startsWith(github.ref, 'refs/tags/')
